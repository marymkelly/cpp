generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("PRISMA_MONGODB_URL")
}

model User {
  // id       String    @id @default(auto()) @map("_id") @db.ObjectId
  id       String    @id @map("_id")
  auth     Auth
  profile  Profile?
  projects Project[]
  logs     Log[]

  @@map("user")
}

type Auth {
  uid         String
  meta        UserMeta?
  providers   ProviderData[]
  credentials Credential[]
}

type Credential {
  accessToken  String
  idToken      String?
  pendingToken String?
  providerId   String
  signInMethod String?
}

type Profile {
  email String
  name  String?
  photo String?
  // phone String?
}

model ProfileModel {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  uid      String  @unique
  email    String  @unique
  name     String?
  provider String?
  photo    String?
}

type ProviderData {
  displayName String
  email       String?
  phoneNumber String?
  photoURL    String?
  providerId  String
  uid         String
}

type UserMeta {
  created           String
  createdReadable   String?
  lastLogin         String?
  lastLoginReadable String?
}

model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String  @unique
  // ownerId     String  @unique @db.ObjectId√ç
  owner       User    @relation(fields: [ownerId], references: [id])
  name        String
  description String?
  category    String?
  status      String?
  dates       Date[]

  type     String?
  role     Role?
  client   Client?
  teamSize Int?
  // team        User[]
  url      String?
  files    String[]
  tags     String[]
  tools    String[]

  logs        Log[]
  created     DateTime @default(now())
  lastUpdated DateTime @updatedAt

  @@unique([id, ownerId])
  @@map("project")
}

model Log {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @unique @db.ObjectId
  project     Project  @relation(fields: [projectId, authorId], references: [id, ownerId])
  // authorId    String   @unique @db.ObjectId
  authorId    String   @unique
  author      User     @relation(fields: [authorId], references: [id])
  title       String?
  message     String?
  type        String?
  dates       Date[]
  created     DateTime @default(now())
  lastUpdated DateTime @updatedAt

  @@map("log")
}

type Client {
  name     String
  industry String?
  // contact
}

type Date {
  date DateTime
  type DateTypes
}

enum DateTypes {
  START
  END
  TARGET
}

enum LogType {
  DETAIL
  GOAL
  TASK
}

type Role {
  title       String?
  description String?
}
